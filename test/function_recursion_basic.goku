# Factorial function using recursion
factorial = (n) -> {
    if n == 0 then {
        1 
    } else {
        return n * factorial(n - 1)
    }
}

# Fibonacci function using recursion  
fibonacci = (n) -> {
    if n == 0 then  {
        return 0
    } else {
        if n == 1 then {
            return 1 
        } else {
            return fibonacci(n - 1) + fibonacci(n - 2)
        }
    }
}

# Print some example calculations
print (factorial(0))
print (factorial(1))
print (factorial(3))
print (factorial(5))

print (fibonacci(0))
print (fibonacci(1))
print (fibonacci(2))
print (fibonacci(3))
print (fibonacci(5))
print (fibonacci(7))

# Test cases for factorial
assert (factorial(0) == 1)
assert (factorial(1) == 1)
assert (factorial(3) == 6)
assert (factorial(5) == 120)

# Test cases for fibonacci
assert (fibonacci(0) == 0)
assert (fibonacci(1) == 1)
assert (fibonacci(2) == 1)
assert (fibonacci(3) == 2)
assert (fibonacci(5) == 5)
assert (fibonacci(7) == 13)